using System.Collections;
using System.Collections.Generic;
using Mirror;
using UnityEngine;

namespace Character
{
    public class InvulnerabilityComponent : NetworkBehaviour
    {
        public Transform MeshRenderersContainer;
        public float InvulnerabilityTime;
        public Color InvulnerabilityColor;
        public Color DefaultColor;
        
        [SyncVar] internal bool IsInvulnerable;

        public void StartInvulnerability()
        {
            StartCoroutine(InvulnerabilityCoroutine());
        }

        private IEnumerator InvulnerabilityCoroutine()
        {
            IsInvulnerable = true;
            if(GetComponent<NetworkIdentity>().hasAuthority)
                CmdPaint(InvulnerabilityColor);
        
            var currentInvulnerabilityTime = 0f;
            while (currentInvulnerabilityTime < InvulnerabilityTime)
            {
                currentInvulnerabilityTime += Time.deltaTime;
                yield return null;
            }

            IsInvulnerable = false;
            if(GetComponent<NetworkIdentity>().hasAuthority)
                CmdPaint(DefaultColor);
        }

        [Command] void CmdPaint (Color color)
        {
            RpcPaint (color); 
        }

        [ClientRpc] void RpcPaint(Color color)
        {
            for (var i = 0; i < MeshRenderersContainer.childCount; i++)
            {
                var mesh = MeshRenderersContainer.GetChild(i);
                var meshRenderer = mesh.GetComponent<SkinnedMeshRenderer>();
                meshRenderer.material.color = color;
            }
        }
    }
}
